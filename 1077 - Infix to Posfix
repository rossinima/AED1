#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

struct StackNode{
    char value;
    struct StackNode* below;
};

struct Stack{
    int size;
    struct StackNode* top;
};

void push(struct Stack* s, char value){
    s->size += 1;
    struct StackNode* newTop = (struct StackNode*) malloc(sizeof(struct StackNode));

    newTop->value = value;
    newTop->below = s->top;
    s->top = newTop;
}

void pop(struct Stack* s){
    if(s->size > 0){
        s->size -= 1;
        struct StackNode* oldTop = s->top;
        s->top = s->top->below;
        free(oldTop);
    }
}

char top(struct Stack* s){
    return s->top->value;
}

int size(struct Stack* s){
    return s->size;
}

int isEmpty(struct Stack* s){
    return s->size == 0;
}

void initialize(struct Stack* s){
    s->size = 0;
    s->top = NULL;
}

void destroy(struct Stack* s){
    while(!isEmpty(s)){
        pop(s);
    }
}

int precedence(char operator){
    switch(operator){
        case '+':
        case '-':   return 1;
        case '*':
        case '/':   return 2;
    }
}

int main(){
    int N, length;
    struct Stack stack;
    char expression[301];

    scanf("%d\n", &N);

    for(int k = 0; k < N; ++k){
        scanf("%s\n", expression);

        initialize(&stack);

        length = strlen(expression);
        for(int i = 0; i < length; ++i){
            if(isalpha(expression[i]) || isdigit(expression[i])){
                printf("%c", expression[i]);
            }else if(expression[i] == '(' || expression[i] == '^'){
                push(&stack, expression[i]);
            }else if(expression[i] == ')'){
                while(!isEmpty(&stack) && top(&stack) != '('){
                    printf("%c", top(&stack));
                    pop(&stack);
                }

                if(!isEmpty(&stack))  pop(&stack);
            }else{
                while(!isEmpty(&stack) && top(&stack) != '(' && precedence(expression[i]) <= precedence(top(&stack))){
                    printf("%c", top(&stack));
                    pop(&stack);
                }

                push(&stack, expression[i]);
            }
        }

        while(!isEmpty(&stack)){
            printf("%c", top(&stack));
            pop(&stack);
        }
        printf("\n");
    }

    return 0;
}
